// Mocks generated by Mockito 5.4.6 from annotations
// in breakly/test/unit/services/session_sync_service_basic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:breakly/interfaces/preferences_repository.dart' as _i5;
import 'package:breakly/interfaces/remote_session_repository.dart' as _i3;
import 'package:breakly/models/remote_session_data.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRemoteSessionData_0 extends _i1.SmartFake
    implements _i2.RemoteSessionData {
  _FakeRemoteSessionData_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RemoteSessionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteSessionRepository extends _i1.Mock
    implements _i3.RemoteSessionRepository {
  MockRemoteSessionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.RemoteSessionData?> getActiveSession(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveSession, [deviceId]),
            returnValue: _i4.Future<_i2.RemoteSessionData?>.value(),
          )
          as _i4.Future<_i2.RemoteSessionData?>);

  @override
  _i4.Future<_i2.RemoteSessionData?> getSessionById(String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#getSessionById, [sessionId]),
            returnValue: _i4.Future<_i2.RemoteSessionData?>.value(),
          )
          as _i4.Future<_i2.RemoteSessionData?>);

  @override
  _i4.Future<_i2.RemoteSessionData> createSession(
    _i2.RemoteSessionData? session,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createSession, [session]),
            returnValue: _i4.Future<_i2.RemoteSessionData>.value(
              _FakeRemoteSessionData_0(
                this,
                Invocation.method(#createSession, [session]),
              ),
            ),
          )
          as _i4.Future<_i2.RemoteSessionData>);

  @override
  _i4.Future<_i2.RemoteSessionData> updateSession(
    _i2.RemoteSessionData? session,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateSession, [session]),
            returnValue: _i4.Future<_i2.RemoteSessionData>.value(
              _FakeRemoteSessionData_0(
                this,
                Invocation.method(#updateSession, [session]),
              ),
            ),
          )
          as _i4.Future<_i2.RemoteSessionData>);

  @override
  _i4.Future<void> endSession(String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#endSession, [sessionId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSession(String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSession, [sessionId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i2.RemoteSessionData> watchSession(String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#watchSession, [sessionId]),
            returnValue: _i4.Stream<_i2.RemoteSessionData>.empty(),
          )
          as _i4.Stream<_i2.RemoteSessionData>);

  @override
  _i4.Stream<List<_i2.RemoteSessionData>> watchActiveSessions(
    String? deviceId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchActiveSessions, [deviceId]),
            returnValue: _i4.Stream<List<_i2.RemoteSessionData>>.empty(),
          )
          as _i4.Stream<List<_i2.RemoteSessionData>>);

  @override
  _i4.Future<bool> isConnected() =>
      (super.noSuchMethod(
            Invocation.method(#isConnected, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i3.SyncStatus> getSyncStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getSyncStatus, []),
            returnValue: _i4.Future<_i3.SyncStatus>.value(
              _i3.SyncStatus.synced,
            ),
          )
          as _i4.Future<_i3.SyncStatus>);

  @override
  _i4.Future<void> forceSync() =>
      (super.noSuchMethod(
            Invocation.method(#forceSync, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PreferencesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesRepository extends _i1.Mock
    implements _i5.PreferencesRepository {
  MockPreferencesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int?> getMinutesTarget() =>
      (super.noSuchMethod(
            Invocation.method(#getMinutesTarget, []),
            returnValue: _i4.Future<int?>.value(),
          )
          as _i4.Future<int?>);

  @override
  _i4.Future<void> setMinutesTarget(int? minutes) =>
      (super.noSuchMethod(
            Invocation.method(#setMinutesTarget, [minutes]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int?> getActiveSessionStartedAt() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveSessionStartedAt, []),
            returnValue: _i4.Future<int?>.value(),
          )
          as _i4.Future<int?>);

  @override
  _i4.Future<void> setActiveSessionStartedAt(int? milliseconds) =>
      (super.noSuchMethod(
            Invocation.method(#setActiveSessionStartedAt, [milliseconds]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearActiveSessionStartedAt() =>
      (super.noSuchMethod(
            Invocation.method(#clearActiveSessionStartedAt, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
