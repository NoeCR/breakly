// Mocks generated by Mockito 5.4.6 from annotations
// in breakly/test/unit/notifiers/breakly_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:breakly/interfaces/device_mode_service.dart' as _i5;
import 'package:breakly/interfaces/notification_service.dart' as _i4;
import 'package:breakly/interfaces/preferences_repository.dart' as _i2;
import 'package:breakly/interfaces/remote_session_repository.dart' as _i8;
import 'package:breakly/models/app_state.dart' as _i7;
import 'package:breakly/services/session_sync_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PreferencesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesRepository extends _i1.Mock
    implements _i2.PreferencesRepository {
  MockPreferencesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int?> getMinutesTarget() =>
      (super.noSuchMethod(
            Invocation.method(#getMinutesTarget, []),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<void> setMinutesTarget(int? minutes) =>
      (super.noSuchMethod(
            Invocation.method(#setMinutesTarget, [minutes]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int?> getActiveSessionStartedAt() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveSessionStartedAt, []),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<void> setActiveSessionStartedAt(int? milliseconds) =>
      (super.noSuchMethod(
            Invocation.method(#setActiveSessionStartedAt, [milliseconds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearActiveSessionStartedAt() =>
      (super.noSuchMethod(
            Invocation.method(#clearActiveSessionStartedAt, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i4.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> scheduleEndNotification(int? minutes) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleEndNotification, [minutes]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelEndNotification() =>
      (super.noSuchMethod(
            Invocation.method(#cancelEndNotification, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> checkExactAlarmsPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkExactAlarmsPermission, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> areNotificationsEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#areNotificationsEnabled, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> checkPendingNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#checkPendingNotifications, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DeviceModeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceModeService extends _i1.Mock implements _i5.DeviceModeService {
  MockDeviceModeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Map<String, dynamic>> get deviceModeStream =>
      (super.noSuchMethod(
            Invocation.getter(#deviceModeStream),
            returnValue: _i3.Stream<Map<String, dynamic>>.empty(),
          )
          as _i3.Stream<Map<String, dynamic>>);

  @override
  _i3.Future<bool> hasDoNotDisturbAccess() =>
      (super.noSuchMethod(
            Invocation.method(#hasDoNotDisturbAccess, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> setDoNotDisturb(bool? enable) =>
      (super.noSuchMethod(
            Invocation.method(#setDoNotDisturb, [enable]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> toggleRinger(String? mode) =>
      (super.noSuchMethod(
            Invocation.method(#toggleRinger, [mode]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> openDoNotDisturbSettings() =>
      (super.noSuchMethod(
            Invocation.method(#openDoNotDisturbSettings, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SessionSyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionSyncService extends _i1.Mock
    implements _i6.SessionSyncService {
  MockSessionSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void setStateCallback(_i7.AppState Function()? getCurrentState) =>
      super.noSuchMethod(
        Invocation.method(#setStateCallback, [getCurrentState]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i7.AppState?> syncOnStartup(_i7.AppState? currentState) =>
      (super.noSuchMethod(
            Invocation.method(#syncOnStartup, [currentState]),
            returnValue: _i3.Future<_i7.AppState?>.value(),
          )
          as _i3.Future<_i7.AppState?>);

  @override
  _i3.Future<void> syncCurrentState(_i7.AppState? currentState) =>
      (super.noSuchMethod(
            Invocation.method(#syncCurrentState, [currentState]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void startPeriodicSync() => super.noSuchMethod(
    Invocation.method(#startPeriodicSync, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopPeriodicSync() => super.noSuchMethod(
    Invocation.method(#stopPeriodicSync, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> createRemoteSession(_i7.AppState? currentState) =>
      (super.noSuchMethod(
            Invocation.method(#createRemoteSession, [currentState]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> endRemoteSession() =>
      (super.noSuchMethod(
            Invocation.method(#endRemoteSession, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i8.SyncStatus> getSyncStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getSyncStatus, []),
            returnValue: _i3.Future<_i8.SyncStatus>.value(
              _i8.SyncStatus.synced,
            ),
          )
          as _i3.Future<_i8.SyncStatus>);

  @override
  _i3.Future<bool> isConnected() =>
      (super.noSuchMethod(
            Invocation.method(#isConnected, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> forceSync() =>
      (super.noSuchMethod(
            Invocation.method(#forceSync, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
